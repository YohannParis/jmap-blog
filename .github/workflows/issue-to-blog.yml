# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Convert Issue to Blog Post

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on issues that are opened or labeled
  issues:
    types: [opened, labeled]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  issues: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  process-issue:
    runs-on: ubuntu-latest
    # Only trigger on issues with blog-post label
    if: contains(github.event.issue.labels.*.name, 'blog-post')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create markdown file
        run: |
          # Format date
          POST_DATE=$(date +%Y-%m-%d)

          # Clean title and create slug
          TITLE="${{ github.event.issue.title }}"
          POST_SLUG=$(echo "${TITLE}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')

          # Ensure directory exists
          mkdir -p _posts

          # Define file path
          POST_PATH="_posts/${POST_DATE}-${POST_SLUG}.md"

          # Create markdown file with frontmatter
          cat > "${POST_PATH}" << EOF
          ---
          title: "${TITLE}"
          date: ${POST_DATE}
          ---

          ${{ github.event.issue.body }}
          EOF

          echo "Created post at ${POST_PATH}"

      - name: Commit and push
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add _posts/
          git diff --quiet && git diff --staged --quiet || (git commit -m "Add blog post from issue #${{ github.event.issue.number }}" && git push)
      
      - name: Comment, label, and close issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Add comment with deployed URL
            await github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `Blog post created`
            });

            // Add 'resolved' label
            await github.rest.issues.addLabels({
              issue_number,
              owner,
              repo,
              labels: ['resolved']
            });

            // Close the issue
            await github.rest.issues.update({
              issue_number,
              owner,
              repo,
              state: 'closed'
            });
  
  build:
    runs-on: ubuntu-latest
    needs: process-issue
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
